package com.easy.query.core.proxy.core.tuple.proxy;

import com.easy.query.core.proxy.PropTypeColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLAnyColumn;
import com.easy.query.core.proxy.columns.types.SQLAnyTypeColumn;
import com.easy.query.core.proxy.core.draft.proxy.AbstractDraftProxy;
import com.easy.query.core.proxy.core.tuple.Tuple4;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.util.EasyObjectUtil;

import java.util.Optional;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class Tuple4Proxy<T1,T2,T3,T4> extends AbstractDraftProxy<Tuple4Proxy<T1,T2,T3,T4>, Tuple4<T1,T2,T3,T4>> {

    private static final Class<Tuple4> entityClass = Tuple4.class;


    public Tuple4Proxy(PropTypeColumn<T1> column1, PropTypeColumn<T2> column2, PropTypeColumn<T3> column3, PropTypeColumn<T4> column4) {
        super(4);
        fetch(0, column1, "value1");
        fetch(1, column2, "value2");
        fetch(2, column3, "value3");
        fetch(3, column4, "value4");
    }

    /**
     * {@link Tuple4#getValue1}
     */
    public SQLAnyTypeColumn<Tuple4Proxy<T1,T2,T3,T4>, T1> value1() {
        return getAnyTypeColumn("value1",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[0]).map(o->o.getPropertyType()).orElse(null)));
    }

    /**
     * {@link Tuple4#getValue2()}
     */
    public SQLAnyTypeColumn<Tuple4Proxy<T1,T2,T3,T4>, T2> value2() {
        return getAnyTypeColumn("value2",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[1]).map(o->o.getPropertyType()).orElse(null)));
    }
    /**
     * {@link Tuple4#getValue3()}
     */
    public SQLAnyTypeColumn<Tuple4Proxy<T1,T2,T3,T4>, T3> value3() {
        return getAnyTypeColumn("value3",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[2]).map(o->o.getPropertyType()).orElse(null)));
    }
    /**
     * {@link Tuple4#getValue4()}
     */
    public SQLAnyTypeColumn<Tuple4Proxy<T1,T2,T3,T4>, T4> value4() {
        return getAnyTypeColumn("value4",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[3]).map(o->o.getPropertyType()).orElse(null)));
    }


    @Override
    public Class<Tuple4<T1,T2,T3,T4>> getEntityClass() {
        return EasyObjectUtil.typeCastNullable(entityClass);
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public Tuple4ProxyFetcher<T1,T2,T3,T4> FETCHER = new Tuple4ProxyFetcher<>(this, null, SQLSelectAsExpression.empty);


    public static class Tuple4ProxyFetcher<TF1,TF2,TF3,TF4> extends AbstractFetcher<Tuple4Proxy<TF1,TF2,TF3,TF4>, Tuple4<TF1,TF2,TF3,TF4>, Tuple4ProxyFetcher<TF1,TF2,TF3,TF4>> {

        public Tuple4ProxyFetcher(Tuple4Proxy<TF1,TF2,TF3,TF4> proxy, Tuple4ProxyFetcher<TF1,TF2,TF3,TF4> prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * {@link Tuple4#getValue1}
         */
        public Tuple4ProxyFetcher<TF1,TF2,TF3,TF4> value1() {
            return add(getProxy().value1());
        }


        /**
         * {@link Tuple4#getValue2}
         */
        public Tuple4ProxyFetcher<TF1,TF2,TF3,TF4> value2() {
            return add(getProxy().value2());
        }
        /**
         * {@link Tuple4#getValue3}
         */
        public Tuple4ProxyFetcher<TF1,TF2,TF3,TF4> value3() {
            return add(getProxy().value3());
        }
        /**
         * {@link Tuple4#getValue4}
         */
        public Tuple4ProxyFetcher<TF1,TF2,TF3,TF4> value4() {
            return add(getProxy().value4());
        }


        @Override
        protected Tuple4ProxyFetcher<TF1,TF2,TF3,TF4> createFetcher(
                Tuple4Proxy<TF1,TF2,TF3,TF4> cp,
                AbstractFetcher<Tuple4Proxy<TF1,TF2,TF3,TF4>, Tuple4<TF1,TF2,TF3,TF4>, Tuple4ProxyFetcher<TF1,TF2,TF3,TF4>> prev,
                SQLSelectAsExpression sqlSelectExpression
        ) {
            return new Tuple4ProxyFetcher<>(cp, this, sqlSelectExpression);
        }
    }

}
