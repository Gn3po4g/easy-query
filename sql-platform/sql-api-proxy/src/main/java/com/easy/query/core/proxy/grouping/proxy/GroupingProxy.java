package com.easy.query.core.proxy.grouping.proxy;

import com.easy.query.core.expression.lambda.SQLFuncExpression1;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.core.draft.Draft2;
import com.easy.query.core.proxy.extension.ColumnAggregatable;
import com.easy.query.core.proxy.extension.ColumnFuncComparableExpression;
import com.easy.query.core.proxy.grouping.Grouping;
import com.easy.query.core.util.EasyObjectUtil;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class GroupingProxy<TKey1,TSourceProxy> extends AbstractProxyEntity<GroupingProxy<TKey1,TSourceProxy>, Grouping<TKey1, TSourceProxy>> {

    private static final Class<Grouping> entityClass = Grouping.class;
    private final TKey1 keyDraft;
    private final TSourceProxy tSourceProxy;

    public GroupingProxy(TKey1 keyDraft,TSourceProxy tSourceProxy) {
        this.keyDraft = keyDraft;
        this.tSourceProxy = tSourceProxy;
    }


    @Override
    public Class<Grouping<TKey1, TSourceProxy>> getEntityClass() {
        return EasyObjectUtil.typeCastNullable(entityClass);
    }

    /**
     * {@link Draft2#getValue1}
     */
    public TKey1 groupKeys() {
        return keyDraft;
    }

    public <TProperty,TResult extends Long> ColumnFuncComparableExpression<TResult> count(SQLFuncExpression1<TSourceProxy, ColumnAggregatable<TProperty>> column){
        return column.apply(tSourceProxy).count();
    }

}
