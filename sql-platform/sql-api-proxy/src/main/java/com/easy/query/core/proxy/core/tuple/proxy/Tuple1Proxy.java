package com.easy.query.core.proxy.core.tuple.proxy;

import com.easy.query.core.proxy.PropTypeColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLAnyColumn;
import com.easy.query.core.proxy.columns.types.SQLAnyTypeColumn;
import com.easy.query.core.proxy.core.draft.proxy.AbstractDraftProxy;
import com.easy.query.core.proxy.core.tuple.Tuple1;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.util.EasyObjectUtil;

import java.util.Optional;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class Tuple1Proxy<T1> extends AbstractDraftProxy<Tuple1Proxy<T1>, Tuple1<T1>> {

    private static final Class<Tuple1> entityClass = Tuple1.class;


    public Tuple1Proxy(PropTypeColumn<T1> column1) {
        super(1);
        fetch(0,column1,"value1");
    }

    /**
     * {@link Tuple1#getValue1}
     */
    public SQLAnyTypeColumn<Tuple1Proxy<T1>, T1> value1() {
        return getAnyTypeColumn("value1",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[0]).map(o->o.getPropertyType()).orElse(null)));
    }


    @Override
    public Class<Tuple1<T1>> getEntityClass() {
        return EasyObjectUtil.typeCastNullable(entityClass);
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public Tuple1ProxyFetcher<T1> FETCHER = new Tuple1ProxyFetcher<>(this, null, SQLSelectAsExpression.empty);


    public static class Tuple1ProxyFetcher<TF1> extends AbstractFetcher<Tuple1Proxy<TF1>, Tuple1<TF1>, Tuple1ProxyFetcher<TF1>> {

        public Tuple1ProxyFetcher(Tuple1Proxy<TF1> proxy, Tuple1ProxyFetcher<TF1> prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * {@link Tuple1#getValue1}
         */
        public Tuple1ProxyFetcher<TF1> value1() {
            return add(getProxy().value1());
        }


        @Override
        protected Tuple1ProxyFetcher<TF1> createFetcher(
                Tuple1Proxy<TF1> cp,
                AbstractFetcher<Tuple1Proxy<TF1>, Tuple1<TF1>, Tuple1ProxyFetcher<TF1>> prev,
                SQLSelectAsExpression sqlSelectExpression
        ) {
            return new Tuple1ProxyFetcher<>(cp, this, sqlSelectExpression);
        }
    }

}
