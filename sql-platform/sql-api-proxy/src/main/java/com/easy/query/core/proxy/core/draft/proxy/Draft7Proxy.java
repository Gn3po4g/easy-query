package com.easy.query.core.proxy.core.draft.proxy;

import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLAnyColumn;
import com.easy.query.core.proxy.core.draft.Draft7;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.util.EasyObjectUtil;

import java.util.Optional;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class Draft7Proxy<T1,T2,T3,T4,T5,T6,T7> extends AbstractDraftProxy<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, Draft7<T1,T2,T3,T4,T5,T6,T7>> {

    private static final Class<Draft7> entityClass = Draft7.class;

    public static <TR1,TR2,TR3,TR4,TR5,TR6,TR7> Draft7Proxy<TR1,TR2,TR3,TR4,TR5,TR6,TR7> createTable() {
        return new Draft7Proxy<>();
    }

    public Draft7Proxy() {
        super(7);
    }

    /**
     * {@link Draft7#getValue1}
     */
    public SQLAnyColumn<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, T1> value1() {
        return getAnyColumn("value1",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[0]).map(o->o.getPropertyType()).orElse(null)));
    }

    /**
     * {@link Draft7#getValue2()}
     */
    public SQLAnyColumn<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, T2> value2() {
        return getAnyColumn("value2",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[1]).map(o->o.getPropertyType()).orElse(null)));
    }
    /**
     * {@link Draft7#getValue3()}
     */
    public SQLAnyColumn<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, T3> value3() {
        return getAnyColumn("value3",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[2]).map(o->o.getPropertyType()).orElse(null)));
    }
    /**
     * {@link Draft7#getValue4()}
     */
    public SQLAnyColumn<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, T4> value4() {
        return getAnyColumn("value4",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[3]).map(o->o.getPropertyType()).orElse(null)));
    }
    /**
     * {@link Draft7#getValue5()}
     */
    public SQLAnyColumn<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, T5> value5() {
        return getAnyColumn("value5",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[4]).map(o->o.getPropertyType()).orElse(null)));
    }
    /**
     * {@link Draft7#getValue6()}
     */
    public SQLAnyColumn<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, T6> value6() {
        return getAnyColumn("value6",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[5]).map(o->o.getPropertyType()).orElse(null)));
    }
    /**
     * {@link Draft7#getValue7()}
     */
    public SQLAnyColumn<Draft7Proxy<T1,T2,T3,T4,T5,T6,T7>, T7> value7() {
        return getAnyColumn("value7",EasyObjectUtil.typeCastNullable(Optional.ofNullable(getDraftPropTypes()[6]).map(o->o.getPropertyType()).orElse(null)));
    }


    @Override
    public Class<Draft7<T1,T2,T3,T4,T5,T6,T7>> getEntityClass() {
        return EasyObjectUtil.typeCastNullable(entityClass);
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public Draft7ProxyFetcher<T1,T2,T3,T4,T5,T6,T7> FETCHER = new Draft7ProxyFetcher<>(this, null, SQLSelectAsExpression.empty);


    public static class Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> extends AbstractFetcher<Draft7Proxy<TF1,TF2,TF3,TF4,TF5,TF6,TF7>, Draft7<TF1,TF2,TF3,TF4,TF5,TF6,TF7>, Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7>> {

        public Draft7ProxyFetcher(Draft7Proxy<TF1,TF2,TF3,TF4,TF5,TF6,TF7> proxy, Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * {@link Draft7#getValue1}
         */
        public Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> value1() {
            return add(getProxy().value1());
        }


        /**
         * {@link Draft7#getValue2}
         */
        public Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> value2() {
            return add(getProxy().value2());
        }
        /**
         * {@link Draft7#getValue3}
         */
        public Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> value3() {
            return add(getProxy().value3());
        }
        /**
         * {@link Draft7#getValue4}
         */
        public Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> value4() {
            return add(getProxy().value4());
        }
        /**
         * {@link Draft7#getValue5}
         */
        public Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> value5() {
            return add(getProxy().value5());
        }
        /**
         * {@link Draft7#getValue6}
         */
        public Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> value6() {
            return add(getProxy().value6());
        }
        /**
         * {@link Draft7#getValue7}
         */
        public Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> value7() {
            return add(getProxy().value7());
        }


        @Override
        protected Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7> createFetcher(
                Draft7Proxy<TF1,TF2,TF3,TF4,TF5,TF6,TF7> cp,
                AbstractFetcher<Draft7Proxy<TF1,TF2,TF3,TF4,TF5,TF6,TF7>, Draft7<TF1,TF2,TF3,TF4,TF5,TF6,TF7>, Draft7ProxyFetcher<TF1,TF2,TF3,TF4,TF5,TF6,TF7>> prev,
                SQLSelectAsExpression sqlSelectExpression
        ) {
            return new Draft7ProxyFetcher<>(cp, this, sqlSelectExpression);
        }
    }

}
