package com.easy.query.test.entity.proxy;

import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLAnyColumn;
import com.easy.query.core.proxy.columns.SQLDateTimeColumn;
import com.easy.query.core.proxy.columns.SQLNumberColumn;
import com.easy.query.core.proxy.columns.SQLStringColumn;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.TopicTypeArrayJson;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author xuejiaming
 */
public class TopicTypeArrayJsonProxy extends AbstractProxyEntity < TopicTypeArrayJsonProxy, TopicTypeArrayJson > {

    private static final Class < TopicTypeArrayJson > entityClass = TopicTypeArrayJson .class;

    public static TopicTypeArrayJsonProxy createTable () {
        return new TopicTypeArrayJsonProxy ();
    }

    public TopicTypeArrayJsonProxy () {
    }

    /**
     * {@link TopicTypeArrayJson#getId}
     */
    public SQLStringColumn < TopicTypeArrayJsonProxy, java.lang.String> id(){
    return getStringColumn("id", java.lang.String.class);
}

    /**
     * {@link TopicTypeArrayJson#getStars}
     */
    public SQLNumberColumn < TopicTypeArrayJsonProxy, java.lang.Integer> stars(){
    return getNumberColumn("stars", java.lang.Integer.class);
}

    /**
     * {@link TopicTypeArrayJson#getTitle}
     */
    public SQLAnyColumn < TopicTypeArrayJsonProxy, com.easy.query.test.entity.TopicTypeJsonValue> title(){
    return getAnyColumn("title", com.easy.query.test.entity.TopicTypeJsonValue.class);
}

    /**
     * {@link TopicTypeArrayJson#getTitle2}
     */
    public SQLAnyColumn < TopicTypeArrayJsonProxy, java.lang.Object> title2(){
    return getAnyColumn("title2", java.lang.Object.class);
}

    /**
     * {@link TopicTypeArrayJson#getTopicType}
     */
    public SQLNumberColumn < TopicTypeArrayJsonProxy, java.lang.Integer> topicType(){
    return getNumberColumn("topicType", java.lang.Integer.class);
}

    /**
     * {@link TopicTypeArrayJson#getCreateTime}
     */
    public SQLDateTimeColumn < TopicTypeArrayJsonProxy, java.time.LocalDateTime> createTime(){
    return getDateTimeColumn("createTime", java.time.LocalDateTime.class);
}


    @Override
    public Class < TopicTypeArrayJson > getEntityClass () {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     * @return
     */
    public TopicTypeArrayJsonProxyFetcher FETCHER =
        new TopicTypeArrayJsonProxyFetcher (this, null, SQLSelectAsExpression.empty);


    public static class TopicTypeArrayJsonProxyFetcher extends AbstractFetcher<TopicTypeArrayJsonProxy, TopicTypeArrayJson, TopicTypeArrayJsonProxyFetcher> {

        public TopicTypeArrayJsonProxyFetcher (TopicTypeArrayJsonProxy proxy, TopicTypeArrayJsonProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
        super(proxy, prev, sqlSelectAsExpression);
    }


        /**
         * {@link TopicTypeArrayJson#getId}
         */
        public TopicTypeArrayJsonProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link TopicTypeArrayJson#getStars}
         */
        public TopicTypeArrayJsonProxyFetcher stars() {
            return add(getProxy().stars());
        }

        /**
         * {@link TopicTypeArrayJson#getTitle}
         */
        public TopicTypeArrayJsonProxyFetcher title() {
            return add(getProxy().title());
        }

        /**
         * {@link TopicTypeArrayJson#getTitle2}
         */
        public TopicTypeArrayJsonProxyFetcher title2() {
            return add(getProxy().title2());
        }

        /**
         * {@link TopicTypeArrayJson#getTopicType}
         */
        public TopicTypeArrayJsonProxyFetcher topicType() {
            return add(getProxy().topicType());
        }

        /**
         * {@link TopicTypeArrayJson#getCreateTime}
         */
        public TopicTypeArrayJsonProxyFetcher createTime() {
            return add(getProxy().createTime());
        }


        @Override
        protected TopicTypeArrayJsonProxyFetcher createFetcher(
            TopicTypeArrayJsonProxy cp,
            AbstractFetcher<TopicTypeArrayJsonProxy, TopicTypeArrayJson, TopicTypeArrayJsonProxyFetcher> prev,
            SQLSelectAsExpression sqlSelectExpression
        ) {
            return new TopicTypeArrayJsonProxyFetcher (cp, this, sqlSelectExpression);
        }
    }

}
