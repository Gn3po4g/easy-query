package com.easy.query.test.entity.school.dto.proxy;

import com.easy.query.api.proxy.base.StringProxy;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLQueryable;
import com.easy.query.core.proxy.columns.SQLStringColumn;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.school.dto.SchoolClassTeachIdsVO;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author easy-query
 */
public class SchoolClassTeachIdsVOProxy extends AbstractProxyEntity<SchoolClassTeachIdsVOProxy, SchoolClassTeachIdsVO> {

    private static final Class<SchoolClassTeachIdsVO> entityClass = SchoolClassTeachIdsVO.class;

    public static SchoolClassTeachIdsVOProxy createTable() {
        return new SchoolClassTeachIdsVOProxy();
    }

    public SchoolClassTeachIdsVOProxy() {
    }

    /**
     * {@link SchoolClassTeachIdsVO#getId}
     */
    public SQLStringColumn<SchoolClassTeachIdsVOProxy, java.lang.String> id() {
        return getStringColumn("id", java.lang.String.class);
    }

    /**
     * {@link SchoolClassTeachIdsVO#getName}
     */
    public SQLStringColumn<SchoolClassTeachIdsVOProxy, java.lang.String> name() {
        return getStringColumn("name", java.lang.String.class);
    }

    /**
     * {@link SchoolClassTeachIdsVO#getTeacherIds}
     */
    public SQLQueryable<StringProxy, java.lang.String> teacherIds() {
        return getNavigates("teacherIds", new StringProxy());
    }


    @Override
    public Class<SchoolClassTeachIdsVO> getEntityClass() {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public SchoolClassTeachIdsVOProxyFetcher FETCHER = new SchoolClassTeachIdsVOProxyFetcher(this, null, SQLSelectAsExpression.empty);


    public static class SchoolClassTeachIdsVOProxyFetcher extends AbstractFetcher<SchoolClassTeachIdsVOProxy, SchoolClassTeachIdsVO, SchoolClassTeachIdsVOProxyFetcher> {

        public SchoolClassTeachIdsVOProxyFetcher(SchoolClassTeachIdsVOProxy proxy, SchoolClassTeachIdsVOProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * {@link SchoolClassTeachIdsVO#getId}
         */
        public SchoolClassTeachIdsVOProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link SchoolClassTeachIdsVO#getName}
         */
        public SchoolClassTeachIdsVOProxyFetcher name() {
            return add(getProxy().name());
        }


        @Override
        protected SchoolClassTeachIdsVOProxyFetcher createFetcher(SchoolClassTeachIdsVOProxy cp, AbstractFetcher<SchoolClassTeachIdsVOProxy, SchoolClassTeachIdsVO, SchoolClassTeachIdsVOProxyFetcher> prev, SQLSelectAsExpression sqlSelectExpression) {
            return new SchoolClassTeachIdsVOProxyFetcher(cp, this, sqlSelectExpression);
        }
    }

}
