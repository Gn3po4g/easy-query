package com.easy.query.test.entity.school.dto.proxy;

import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.school.dto.SchoolClassVO;
import com.easy.query.core.proxy.columns.SQLNavigateColumn;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class SchoolClassVOProxy extends AbstractProxyEntity < SchoolClassVOProxy, SchoolClassVO > {

    private static final Class < SchoolClassVO > entityClass = SchoolClassVO .class;

    public static SchoolClassVOProxy createTable () {
        return new SchoolClassVOProxy ();
    }

    public SchoolClassVOProxy () {
    }

    /**
     * {@link SchoolClassVO#getId}
     */
    public SQLColumn < SchoolClassVOProxy, java.lang.String> id(){
    return get("id");
}

    /**
     * {@link SchoolClassVO#getName}
     */
    public SQLColumn < SchoolClassVOProxy, java.lang.String> name(){
    return get("name");
}

    /**
     * {@link SchoolClassVO#getSchoolStudents}
     */
    public SQLNavigateColumn < SchoolClassVOProxy, com.easy.query.test.entity.school.dto.SchoolStudentVO> schoolStudents(){
    return getNavigate("schoolStudents", com.easy.query.test.entity.school.dto.SchoolStudentVO.class);
}

    /**
     * {@link SchoolClassVO#getSchoolTeachers}
     */
    public SQLNavigateColumn < SchoolClassVOProxy, com.easy.query.test.entity.school.dto.SchoolTeacherVO> schoolTeachers(){
    return getNavigate("schoolTeachers", com.easy.query.test.entity.school.dto.SchoolTeacherVO.class);
}


    @Override
    public Class < SchoolClassVO > getEntityClass () {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     * @return
     */
    public SchoolClassVOProxyFetcher FETCHER = new SchoolClassVOProxyFetcher (this, null, SQLSelectAsExpression.empty);


    public static class SchoolClassVOProxyFetcher extends AbstractFetcher<SchoolClassVOProxy, SchoolClassVO, SchoolClassVOProxyFetcher> {

        public SchoolClassVOProxyFetcher (SchoolClassVOProxy proxy, SchoolClassVOProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
        super(proxy, prev, sqlSelectAsExpression);
    }


        /**
         * {@link SchoolClassVO#getId}
         */
        public SchoolClassVOProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link SchoolClassVO#getName}
         */
        public SchoolClassVOProxyFetcher name() {
            return add(getProxy().name());
        }


        @Override
        protected SchoolClassVOProxyFetcher createFetcher(
            SchoolClassVOProxy cp,
            AbstractFetcher<SchoolClassVOProxy, SchoolClassVO, SchoolClassVOProxyFetcher> prev,
            SQLSelectAsExpression sqlSelectExpression
        ) {
            return new SchoolClassVOProxyFetcher (cp, this, sqlSelectExpression);
        }
    }

}
