package com.easy.query.test.entity.school.proxy;

import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLNavigateColumn;
import com.easy.query.core.proxy.columns.SQLStringColumn;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.school.MySchoolStudentAddress;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author xuejiaming
 */
public class MySchoolStudentAddressProxy extends AbstractProxyEntity < MySchoolStudentAddressProxy, MySchoolStudentAddress > {

    private static final Class < MySchoolStudentAddress > entityClass = MySchoolStudentAddress .class;

    public static MySchoolStudentAddressProxy createTable () {
        return new MySchoolStudentAddressProxy ();
    }

    public MySchoolStudentAddressProxy () {
    }

    /**
     * {@link MySchoolStudentAddress#getId}
     */
    public SQLStringColumn < MySchoolStudentAddressProxy, java.lang.String> id(){
    return getStringColumn("id", java.lang.String.class);
}

    /**
     * {@link MySchoolStudentAddress#getStudentId}
     */
    public SQLStringColumn < MySchoolStudentAddressProxy, java.lang.String> studentId(){
    return getStringColumn("studentId", java.lang.String.class);
}

    /**
     * {@link MySchoolStudentAddress#getAddress}
     */
    public SQLStringColumn < MySchoolStudentAddressProxy, java.lang.String> address(){
    return getStringColumn("address", java.lang.String.class);
}

    /**
     * {@link MySchoolStudentAddress#getSchoolStudent}
     */
    public SQLNavigateColumn < MySchoolStudentAddressProxy, com.easy.query.test.entity.school.MySchoolStudent> schoolStudent(){
    return getNavigate("schoolStudent", com.easy.query.test.entity.school.MySchoolStudent.class);
}


    @Override
    public Class < MySchoolStudentAddress > getEntityClass () {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     * @return
     */
    public MySchoolStudentAddressProxyFetcher FETCHER =
        new MySchoolStudentAddressProxyFetcher (this, null, SQLSelectAsExpression.empty);


    public static class MySchoolStudentAddressProxyFetcher extends AbstractFetcher<MySchoolStudentAddressProxy, MySchoolStudentAddress, MySchoolStudentAddressProxyFetcher> {

        public MySchoolStudentAddressProxyFetcher (MySchoolStudentAddressProxy proxy, MySchoolStudentAddressProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
        super(proxy, prev, sqlSelectAsExpression);
    }


        /**
         * {@link MySchoolStudentAddress#getId}
         */
        public MySchoolStudentAddressProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link MySchoolStudentAddress#getStudentId}
         */
        public MySchoolStudentAddressProxyFetcher studentId() {
            return add(getProxy().studentId());
        }

        /**
         * {@link MySchoolStudentAddress#getAddress}
         */
        public MySchoolStudentAddressProxyFetcher address() {
            return add(getProxy().address());
        }


        @Override
        protected MySchoolStudentAddressProxyFetcher createFetcher(
            MySchoolStudentAddressProxy cp,
            AbstractFetcher<MySchoolStudentAddressProxy, MySchoolStudentAddress, MySchoolStudentAddressProxyFetcher> prev,
            SQLSelectAsExpression sqlSelectExpression
        ) {
            return new MySchoolStudentAddressProxyFetcher (cp, this, sqlSelectExpression);
        }
    }

}
