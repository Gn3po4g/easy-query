package com.easy.query.test.entity.proxy;

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.proxy.core.EntitySQLContext;
import com.easy.query.test.entity.BlogEntity2;
import com.easy.query.core.proxy.columns.SQLStringColumn;
import com.easy.query.core.proxy.columns.SQLNumberColumn;
import com.easy.query.core.proxy.columns.SQLDateTimeColumn;
import com.easy.query.core.proxy.columns.SQLBooleanColumn;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author xuejiaming
 */
public class BlogEntity2Proxy extends AbstractProxyEntity<BlogEntity2Proxy, BlogEntity2> {

    private static final Class<BlogEntity2> entityClass = BlogEntity2.class;

    public static BlogEntity2Proxy createTable() {
        return new BlogEntity2Proxy();
    }

    public BlogEntity2Proxy() {
    }

    /**
     * 标题
     * {@link BlogEntity2#getTitle}
     */
    public SQLStringColumn<BlogEntity2Proxy, java.lang.String> title() {
        return getStringColumn("title", java.lang.String.class);
    }

    /**
     * 内容
     * {@link BlogEntity2#getContent}
     */
    public SQLStringColumn<BlogEntity2Proxy, java.lang.String> content() {
        return getStringColumn("content", java.lang.String.class);
    }

    /**
     * 博客链接
     * {@link BlogEntity2#getUrl}
     */
    public SQLStringColumn<BlogEntity2Proxy, java.lang.String> url() {
        return getStringColumn("url", java.lang.String.class);
    }

    /**
     * 点赞数
     * {@link BlogEntity2#getStar}
     */
    public SQLNumberColumn<BlogEntity2Proxy, java.math.BigDecimal> star() {
        return getNumberColumn("star", java.math.BigDecimal.class);
    }

    /**
     * {@link BlogEntity2#getId}
     */
    public SQLStringColumn<BlogEntity2Proxy, java.lang.String> id() {
        return getStringColumn("id", java.lang.String.class);
    }

    /**
     * 创建时间;创建时间
     * {@link BlogEntity2#getCreateTime}
     */
    public SQLDateTimeColumn<BlogEntity2Proxy, java.time.LocalDateTime> createTime() {
        return getDateTimeColumn("createTime", java.time.LocalDateTime.class);
    }

    /**
     * 修改时间;修改时间
     * {@link BlogEntity2#getUpdateTime}
     */
    public SQLDateTimeColumn<BlogEntity2Proxy, java.time.LocalDateTime> updateTime() {
        return getDateTimeColumn("updateTime", java.time.LocalDateTime.class);
    }

    /**
     * 创建人;创建人
     * {@link BlogEntity2#getCreateBy}
     */
    public SQLStringColumn<BlogEntity2Proxy, java.lang.String> createBy() {
        return getStringColumn("createBy", java.lang.String.class);
    }

    /**
     * 修改人;修改人
     * {@link BlogEntity2#getUpdateBy}
     */
    public SQLStringColumn<BlogEntity2Proxy, java.lang.String> updateBy() {
        return getStringColumn("updateBy", java.lang.String.class);
    }

    /**
     * 是否删除;是否删除
     * {@link BlogEntity2#getDeleted}
     */
    public SQLBooleanColumn<BlogEntity2Proxy, java.lang.Boolean> deleted() {
        return getBooleanColumn("deleted", java.lang.Boolean.class);
    }


    @Override
    public Class<BlogEntity2> getEntityClass() {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     *
     * @return
     */
    public BlogEntity2ProxyFetcher FETCHER = new BlogEntity2ProxyFetcher(this, null, SQLSelectAsExpression.empty);


    public static class BlogEntity2ProxyFetcher extends AbstractFetcher<BlogEntity2Proxy, BlogEntity2, BlogEntity2ProxyFetcher> {

        public BlogEntity2ProxyFetcher(BlogEntity2Proxy proxy, BlogEntity2ProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }


        /**
         * 标题
         * {@link BlogEntity2#getTitle}
         */
        public BlogEntity2ProxyFetcher title() {
            return add(getProxy().title());
        }

        /**
         * 内容
         * {@link BlogEntity2#getContent}
         */
        public BlogEntity2ProxyFetcher content() {
            return add(getProxy().content());
        }

        /**
         * 博客链接
         * {@link BlogEntity2#getUrl}
         */
        public BlogEntity2ProxyFetcher url() {
            return add(getProxy().url());
        }

        /**
         * 点赞数
         * {@link BlogEntity2#getStar}
         */
        public BlogEntity2ProxyFetcher star() {
            return add(getProxy().star());
        }

        /**
         * {@link BlogEntity2#getId}
         */
        public BlogEntity2ProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * 创建时间;创建时间
         * {@link BlogEntity2#getCreateTime}
         */
        public BlogEntity2ProxyFetcher createTime() {
            return add(getProxy().createTime());
        }

        /**
         * 修改时间;修改时间
         * {@link BlogEntity2#getUpdateTime}
         */
        public BlogEntity2ProxyFetcher updateTime() {
            return add(getProxy().updateTime());
        }

        /**
         * 创建人;创建人
         * {@link BlogEntity2#getCreateBy}
         */
        public BlogEntity2ProxyFetcher createBy() {
            return add(getProxy().createBy());
        }

        /**
         * 修改人;修改人
         * {@link BlogEntity2#getUpdateBy}
         */
        public BlogEntity2ProxyFetcher updateBy() {
            return add(getProxy().updateBy());
        }

        /**
         * 是否删除;是否删除
         * {@link BlogEntity2#getDeleted}
         */
        public BlogEntity2ProxyFetcher deleted() {
            return add(getProxy().deleted());
        }


        @Override
        protected BlogEntity2ProxyFetcher createFetcher(BlogEntity2Proxy cp, AbstractFetcher<BlogEntity2Proxy, BlogEntity2, BlogEntity2ProxyFetcher> prev, SQLSelectAsExpression sqlSelectExpression) {
            return new BlogEntity2ProxyFetcher(cp, this, sqlSelectExpression);
        }
    }

}
