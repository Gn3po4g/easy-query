package com.easy.query.test.entity.proxy;

import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLNumberColumn;
import com.easy.query.core.proxy.columns.SQLStringColumn;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.BlogGroupIdAndName;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class BlogGroupIdAndNameProxy extends AbstractProxyEntity < BlogGroupIdAndNameProxy, BlogGroupIdAndName > {

    private static final Class < BlogGroupIdAndName > entityClass = BlogGroupIdAndName .class;

    public static BlogGroupIdAndNameProxy createTable () {
        return new BlogGroupIdAndNameProxy ();
    }

    public BlogGroupIdAndNameProxy () {
    }

    /**
     * {@link BlogGroupIdAndName#getId}
     */
    public SQLStringColumn < BlogGroupIdAndNameProxy, String> id(){
    return getStringColumn("id", String.class);
}

    /**
     * {@link BlogGroupIdAndName#getIdCount}
     */
    public SQLNumberColumn < BlogGroupIdAndNameProxy, Long> idCount(){
    return getNumberColumn("idCount", Long.class);
}


    @Override
    public Class < BlogGroupIdAndName > getEntityClass () {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     * @return
     */
    public BlogGroupIdAndNameProxyFetcher FETCHER =
        new BlogGroupIdAndNameProxyFetcher (this, null, SQLSelectAsExpression.empty);


    public static class BlogGroupIdAndNameProxyFetcher extends AbstractFetcher<BlogGroupIdAndNameProxy, BlogGroupIdAndName, BlogGroupIdAndNameProxyFetcher> {

        public BlogGroupIdAndNameProxyFetcher (BlogGroupIdAndNameProxy proxy, BlogGroupIdAndNameProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
        super(proxy, prev, sqlSelectAsExpression);
    }


        /**
         * {@link BlogGroupIdAndName#getId}
         */
        public BlogGroupIdAndNameProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link BlogGroupIdAndName#getIdCount}
         */
        public BlogGroupIdAndNameProxyFetcher idCount() {
            return add(getProxy().idCount());
        }


        @Override
        protected BlogGroupIdAndNameProxyFetcher createFetcher(
            BlogGroupIdAndNameProxy cp,
            AbstractFetcher<BlogGroupIdAndNameProxy, BlogGroupIdAndName, BlogGroupIdAndNameProxyFetcher> prev,
            SQLSelectAsExpression sqlSelectExpression
        ) {
            return new BlogGroupIdAndNameProxyFetcher (cp, this, sqlSelectExpression);
        }
    }

}
