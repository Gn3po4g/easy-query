package com.easy.query.test.entity.school.dto.proxy;

import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLNavigateColumn;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.school.dto.SchoolStudentAddressVO;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class SchoolStudentAddressVOProxy extends AbstractProxyEntity < SchoolStudentAddressVOProxy, SchoolStudentAddressVO > {

    private static final Class < SchoolStudentAddressVO > entityClass = SchoolStudentAddressVO .class;

    public static SchoolStudentAddressVOProxy createTable () {
        return new SchoolStudentAddressVOProxy ();
    }

    public SchoolStudentAddressVOProxy () {
    }

    /**
     * {@link SchoolStudentAddressVO#getId}
     */
    public SQLColumn < SchoolStudentAddressVOProxy, java.lang.String> id(){
    return get("id");
}

    /**
     * {@link SchoolStudentAddressVO#getStudentId}
     */
    public SQLColumn < SchoolStudentAddressVOProxy, java.lang.String> studentId(){
    return get("studentId");
}

    /**
     * {@link SchoolStudentAddressVO#getAddress}
     */
    public SQLColumn < SchoolStudentAddressVOProxy, java.lang.String> address(){
    return get("address");
}

    /**
     * {@link SchoolStudentAddressVO#getName}
     */
    public SQLColumn < SchoolStudentAddressVOProxy, java.lang.String> name(){
    return get("name");
}

    /**
     * {@link SchoolStudentAddressVO#getSchoolStudent}
     */
    public SQLNavigateColumn < SchoolStudentAddressVOProxy, com.easy.query.test.entity.school.dto.SchoolStudentVO> schoolStudent(){
    return get("schoolStudent", com.easy.query.test.entity.school.dto.SchoolStudentVO.class);
}


    @Override
    public Class < SchoolStudentAddressVO > getEntityClass () {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     * @return
     */
    public SchoolStudentAddressVOProxyFetcher FETCHER =
        new SchoolStudentAddressVOProxyFetcher (this, null, SQLSelectAsExpression.empty);


    public static class SchoolStudentAddressVOProxyFetcher extends AbstractFetcher<SchoolStudentAddressVOProxy, SchoolStudentAddressVO, SchoolStudentAddressVOProxyFetcher> {

        public SchoolStudentAddressVOProxyFetcher (SchoolStudentAddressVOProxy proxy, SchoolStudentAddressVOProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
        super(proxy, prev, sqlSelectAsExpression);
    }


        /**
         * {@link SchoolStudentAddressVO#getId}
         */
        public SchoolStudentAddressVOProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link SchoolStudentAddressVO#getStudentId}
         */
        public SchoolStudentAddressVOProxyFetcher studentId() {
            return add(getProxy().studentId());
        }

        /**
         * {@link SchoolStudentAddressVO#getAddress}
         */
        public SchoolStudentAddressVOProxyFetcher address() {
            return add(getProxy().address());
        }

        /**
         * {@link SchoolStudentAddressVO#getName}
         */
        public SchoolStudentAddressVOProxyFetcher name() {
            return add(getProxy().name());
        }


        @Override
        protected SchoolStudentAddressVOProxyFetcher createFetcher(
            SchoolStudentAddressVOProxy cp,
            AbstractFetcher<SchoolStudentAddressVOProxy, SchoolStudentAddressVO, SchoolStudentAddressVOProxyFetcher> prev,
            SQLSelectAsExpression sqlSelectExpression
        ) {
            return new SchoolStudentAddressVOProxyFetcher (cp, this, sqlSelectExpression);
        }
    }

}
