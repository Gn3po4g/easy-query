package com.easy.query.test.vo.proxy;

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.proxy.core.EntitySQLContext;
import com.easy.query.test.vo.BlogEntityVO1;
import com.easy.query.core.proxy.columns.SQLNumberColumn;
import com.easy.query.core.proxy.columns.SQLBooleanColumn;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author xuejiaming
 */
public class BlogEntityVO1Proxy extends AbstractProxyEntity < BlogEntityVO1Proxy, BlogEntityVO1 > {

    private static final Class < BlogEntityVO1 > entityClass = BlogEntityVO1 .class;

    public static BlogEntityVO1Proxy createTable () {
        return new BlogEntityVO1Proxy ();
    }

    public BlogEntityVO1Proxy () {
    }

    /**
     * 评分
     * {@link BlogEntityVO1#getScore}
     */
    public SQLNumberColumn < BlogEntityVO1Proxy, java.math.BigDecimal> score(){
    return getNumberColumn("score", java.math.BigDecimal.class);
}

    /**
     * 状态
     * {@link BlogEntityVO1#getAbc}
     */
    public SQLNumberColumn < BlogEntityVO1Proxy, Integer> abc(){
    return getNumberColumn("abc", Integer.class);
}

    /**
     * 排序
     * {@link BlogEntityVO1#getOrder}
     */
    public SQLNumberColumn < BlogEntityVO1Proxy, java.math.BigDecimal> order(){
    return getNumberColumn("order", java.math.BigDecimal.class);
}

    /**
     * 是否置顶
     * {@link BlogEntityVO1#getIsTop}
     */
    public SQLBooleanColumn < BlogEntityVO1Proxy, Boolean> isTop(){
    return getBooleanColumn("isTop", Boolean.class);
}

    /**
     * 是否置顶
     * {@link BlogEntityVO1#getTop}
     */
    public SQLBooleanColumn < BlogEntityVO1Proxy, Boolean> top(){
    return getBooleanColumn("top", Boolean.class);
}


    @Override
    public Class < BlogEntityVO1 > getEntityClass () {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     * @return
     */
    public BlogEntityVO1ProxyFetcher FETCHER = new BlogEntityVO1ProxyFetcher (this, null, SQLSelectAsExpression.empty);


    public static class BlogEntityVO1ProxyFetcher extends AbstractFetcher<BlogEntityVO1Proxy, BlogEntityVO1, BlogEntityVO1ProxyFetcher> {

        public BlogEntityVO1ProxyFetcher (BlogEntityVO1Proxy proxy, BlogEntityVO1ProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
        super(proxy, prev, sqlSelectAsExpression);
    }


        /**
         * 评分
         * {@link BlogEntityVO1#getScore}
         */
        public BlogEntityVO1ProxyFetcher score() {
            return add(getProxy().score());
        }

        /**
         * 状态
         * {@link BlogEntityVO1#getAbc}
         */
        public BlogEntityVO1ProxyFetcher abc() {
            return add(getProxy().abc());
        }

        /**
         * 排序
         * {@link BlogEntityVO1#getOrder}
         */
        public BlogEntityVO1ProxyFetcher order() {
            return add(getProxy().order());
        }

        /**
         * 是否置顶
         * {@link BlogEntityVO1#getIsTop}
         */
        public BlogEntityVO1ProxyFetcher isTop() {
            return add(getProxy().isTop());
        }

        /**
         * 是否置顶
         * {@link BlogEntityVO1#getTop}
         */
        public BlogEntityVO1ProxyFetcher top() {
            return add(getProxy().top());
        }


        @Override
        protected BlogEntityVO1ProxyFetcher createFetcher(
            BlogEntityVO1Proxy cp,
            AbstractFetcher<BlogEntityVO1Proxy, BlogEntityVO1, BlogEntityVO1ProxyFetcher> prev,
            SQLSelectAsExpression sqlSelectExpression
        ) {
            return new BlogEntityVO1ProxyFetcher (cp, this, sqlSelectExpression);
        }
    }

}
