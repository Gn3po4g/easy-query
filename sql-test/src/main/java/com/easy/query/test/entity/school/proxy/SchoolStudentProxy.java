package com.easy.query.test.entity.school.proxy;

import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.columns.SQLNavigateColumn;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.school.SchoolStudent;
import com.easy.query.test.entity.school.SchoolStudentAddress;

/**
 * this file automatically generated by easy-query, don't modify it
 *
 * @author xuejiaming
 */
public class SchoolStudentProxy extends AbstractProxyEntity<SchoolStudentProxy, SchoolStudent> {

    private static final Class<SchoolStudent> entityClass = SchoolStudent.class;
    public static SchoolStudentProxy createTable() {
        return new SchoolStudentProxy();
    }

    public SchoolStudentProxy() {
    }

    
    
    /**
     * {@link SchoolStudent#id}
     */
    public SQLColumn<SchoolStudentProxy,java.lang.String> id(){
        return get("id");
    }
    
    /**
     * {@link SchoolStudent#classId}
     */
    public SQLColumn<SchoolStudentProxy,java.lang.String> classId(){
        return get("classId");
    }
    
    /**
     * {@link SchoolStudent#name}
     */
    public SQLColumn<SchoolStudentProxy,java.lang.String> name(){
        return get("name");
    }
    
    /**
     * {@link SchoolStudent#schoolClass}
     */
    public SQLNavigateColumn<SchoolStudentProxy,com.easy.query.test.entity.school.SchoolClass> schoolClass(){
        return get("schoolClass",com.easy.query.test.entity.school.SchoolClass.class);
    }
    
    /**
     * {@link SchoolStudent#schoolStudentAddress}
     */
    public SQLNavigateColumn<SchoolStudentProxy, SchoolStudentAddress> schoolStudentAddress(){
        return get("schoolStudentAddress",SchoolStudentAddress.class);
    }
    @Override
    public Class<SchoolStudent> getEntityClass() {
        return entityClass;
    }

    

    
/**
* 数据库列的简单获取
* @return
*/
public SchoolStudentProxyFetcher FETCHER =new SchoolStudentProxyFetcher(this,null,SQLSelectAsExpression.empty);

    public static class SchoolStudentProxyFetcher extends AbstractFetcher<SchoolStudentProxy,SchoolStudent, SchoolStudentProxyFetcher> {

 public SchoolStudentProxyFetcher(SchoolStudentProxy proxy, SchoolStudentProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
            super(proxy, prev, sqlSelectAsExpression);
        }

        
    
    /**
     * {@link SchoolStudent#id}
     */
    public SchoolStudentProxyFetcher id() {
            return add(getProxy().id());
    }
    
    /**
     * {@link SchoolStudent#classId}
     */
    public SchoolStudentProxyFetcher classId() {
            return add(getProxy().classId());
    }
    
    /**
     * {@link SchoolStudent#name}
     */
    public SchoolStudentProxyFetcher name() {
            return add(getProxy().name());
    }
    
    /**
     * {@link SchoolStudent#schoolClass}
     */
    public SchoolStudentProxyFetcher schoolClass() {
            return add(getProxy().schoolClass());
    }
    
    /**
     * {@link SchoolStudent#schoolStudentAddress}
     */
    public SchoolStudentProxyFetcher schoolStudentAddress() {
            return add(getProxy().schoolStudentAddress());
    }
        @Override
        protected SchoolStudentProxyFetcher createFetcher(SchoolStudentProxy cp, AbstractFetcher<SchoolStudentProxy, SchoolStudent, SchoolStudentProxyFetcher> prev, SQLSelectAsExpression sqlSelectExpression) {
            return new SchoolStudentProxyFetcher(cp, this, sqlSelectExpression);
        }
    }

}