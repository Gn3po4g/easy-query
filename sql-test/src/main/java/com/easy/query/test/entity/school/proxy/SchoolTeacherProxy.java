package com.easy.query.test.entity.school.proxy;

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.test.entity.school.SchoolTeacher;
import com.easy.query.core.proxy.columns.SQLNavigateColumn;

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
public class SchoolTeacherProxy extends AbstractProxyEntity < SchoolTeacherProxy, SchoolTeacher > {

    private static final Class < SchoolTeacher > entityClass = SchoolTeacher .class;

    public static SchoolTeacherProxy createTable () {
        return new SchoolTeacherProxy ();
    }

    public SchoolTeacherProxy () {
    }

    /**
     * {@link SchoolTeacher#id}
     */
    public SQLColumn < SchoolTeacherProxy, String> id(){
    return get("id");
}

    /**
     * {@link SchoolTeacher#name}
     */
    public SQLColumn < SchoolTeacherProxy, String> name(){
    return get("name");
}

    /**
     * {@link SchoolTeacher#schoolClasses}
     */
    public SQLNavigateColumn < SchoolTeacherProxy, com.easy.query.test.entity.school.SchoolClass> schoolClasses(){
    return get("schoolClasses", com.easy.query.test.entity.school.SchoolClass.class);
}


    @Override
    public Class < SchoolTeacher > getEntityClass () {
        return entityClass;
    }


    /**
     * 数据库列的简单获取
     * @return
     */
    public SchoolTeacherProxyFetcher FETCHER = new SchoolTeacherProxyFetcher (this, null, SQLSelectAsExpression.empty);


    public static class SchoolTeacherProxyFetcher extends AbstractFetcher<SchoolTeacherProxy, SchoolTeacher, SchoolTeacherProxyFetcher> {

        public SchoolTeacherProxyFetcher (SchoolTeacherProxy proxy, SchoolTeacherProxyFetcher prev, SQLSelectAsExpression sqlSelectAsExpression) {
        super(proxy, prev, sqlSelectAsExpression);
    }


        /**
         * {@link SchoolTeacher#id}
         */
        public SchoolTeacherProxyFetcher id() {
            return add(getProxy().id());
        }

        /**
         * {@link SchoolTeacher#name}
         */
        public SchoolTeacherProxyFetcher name() {
            return add(getProxy().name());
        }


        @Override
        protected SchoolTeacherProxyFetcher createFetcher(
            SchoolTeacherProxy cp,
            AbstractFetcher<SchoolTeacherProxy, SchoolTeacher, SchoolTeacherProxyFetcher> prev,
            SQLSelectAsExpression sqlSelectExpression
        ) {
            return new SchoolTeacherProxyFetcher (cp, this, sqlSelectExpression);
        }
    }

}
